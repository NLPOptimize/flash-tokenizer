{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"flash-tokenizer/docs","text":""},{"location":"#setup-english","title":"\ud83c\uddfa\ud83c\uddf8 Setup (English)","text":""},{"location":"#_1","title":"\ud83c\udde8\ud83c\uddf3 \u200b\u73af\u5883\u200b\u914d\u7f6e\u200b (\u200b\u7b80\u4f53\u4e2d\u6587\u200b)","text":"<p>View wheel build instructions </p>"},{"location":"BUILD_whl/","title":"Build method for generating whl files per OS","text":""},{"location":"BUILD_whl/#manylinuxx86_64","title":"\u2705 ManyLinux(x86_64)","text":"<p>In the case of this project, you need to enter Docker and build it yourself.</p>"},{"location":"BUILD_whl/#01-run-the-docker-container-with-the-following-command-in-the-flash-tokenizerprj-directory","title":"01. Run the Docker container with the following command in the flash-tokenizer/prj directory.","text":"<pre><code>cd flash-tokenizer/prj\ndocker pull quay.io/pypa/manylinux_2_28\ndocker run -it -v %cd%:/io quay.io/pypa/manylinux_2_28 /bin/bash\n</code></pre>"},{"location":"BUILD_whl/#02-execute-the-following-command-in-docker","title":"02. Execute the following command in Docker","text":"<pre><code>/opt/python/cp313-cp313/bin/pip install build scikit-build-core pybind11 &amp;&amp; \\\n/opt/python/cp312-cp312/bin/pip install build scikit-build-core pybind11 &amp;&amp; \\\n/opt/python/cp311-cp311/bin/pip install build scikit-build-core pybind11 &amp;&amp; \\\n/opt/python/cp310-cp310/bin/pip install build scikit-build-core pybind11 &amp;&amp; \\\n/opt/python/cp39-cp39/bin/pip install build scikit-build-core pybind11 &amp;&amp; \\\n/opt/python/cp38-cp38/bin/pip install build scikit-build-core pybind11\n\ncd /io\n\nCC=gcc CXX=g++ /opt/python/cp313-cp313/bin/python -m build --wheel &amp;&amp; \\\nCC=gcc CXX=g++ /opt/python/cp312-cp312/bin/python -m build --wheel &amp;&amp; \\\nCC=gcc CXX=g++ /opt/python/cp311-cp311/bin/python -m build --wheel &amp;&amp; \\\nCC=gcc CXX=g++ /opt/python/cp310-cp310/bin/python -m build --wheel &amp;&amp; \\\nCC=gcc CXX=g++ /opt/python/cp39-cp39/bin/python -m build --wheel &amp;&amp; \\\nCC=gcc CXX=g++ /opt/python/cp38-cp38/bin/python -m build --wheel\n\nmkdir wheelhouse &amp;&amp; \\\nauditwheel repair dist/*.whl --wheel-dir /io/wheelhouse &amp;&amp; \\\nrm -f dist/*linux*.whl &amp;&amp; \\\nmv wheelhouse/*.whl dist/ &amp;&amp; \\\nrm -rf wheelhouse\n</code></pre>"},{"location":"BUILD_whl/#windows1011-server2022amd64","title":"\u2705 Windows10/11, Server2022(amd64)","text":""},{"location":"BUILD_whl/#01-install-miniconda3","title":"01. Install miniconda3","text":"<pre><code>curl https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe -o .\\miniconda.exe\nstart /wait \"\" .\\miniconda.exe /S\ndel .\\miniconda.exe\n</code></pre>"},{"location":"BUILD_whl/#02-configure-the-python-environment-for-each-version-and-install-the-necessary-libraries","title":"02. Configure the Python environment for each version and install the necessary libraries.","text":"<pre><code>conda create -n python38 python=3.8 -y &amp;&amp; ^\nconda create -n python39 python=3.9 -y &amp;&amp; ^\nconda create -n python310 python=3.10 -y &amp;&amp; ^\nconda create -n python311 python=3.11 -y &amp;&amp; ^\nconda create -n python312 python=3.12 -y &amp;&amp; ^\nconda create -n python313 python=3.13 -y\n\nconda activate python38 &amp;&amp; pip install build twine pybind11 numpy setuptools wheel --no-warn-script-location transformers &amp;&amp; ^\nconda activate python39 &amp;&amp; pip install build twine pybind11 numpy setuptools wheel --no-warn-script-location transformers &amp;&amp; ^\nconda activate python310 &amp;&amp; pip install build twine pybind11 numpy setuptools wheel --no-warn-script-location transformers &amp;&amp; ^\nconda activate python311 &amp;&amp; pip install build twine pybind11 numpy setuptools wheel --no-warn-script-location transformers &amp;&amp; ^\nconda activate python312 &amp;&amp; pip install build twine pybind11 numpy setuptools wheel --no-warn-script-location transformers &amp;&amp; ^\nconda activate python313 &amp;&amp; pip install build twine pybind11 numpy setuptools wheel --no-warn-script-location transformers\n</code></pre>"},{"location":"BUILD_whl/#03-create-a-whl-file-for-each-version","title":"03. Create a whl file for each version","text":"<pre><code>conda activate python38 &amp;&amp; python -m build --wheel &amp;&amp; ^\nconda activate python39 &amp;&amp; python -m build --wheel &amp;&amp; ^\nconda activate python310 &amp;&amp; python -m build --wheel &amp;&amp; ^\nconda activate python311 &amp;&amp; python -m build --wheel &amp;&amp; ^\nconda activate python312 &amp;&amp; python -m build --wheel &amp;&amp; ^\nconda activate python313 &amp;&amp; python -m build --wheel\n</code></pre>"},{"location":"BUILD_whl/#macosarm64","title":"\u2705 macOS(arm64)","text":""},{"location":"BUILD_whl/#01-creating-a-python-environment-from-python-38-to-313","title":"01. Creating a Python environment from Python 3.8 to 3.13","text":"<pre><code>conda create -n python38 python=3.8 -y &amp;&amp;\\\nconda create -n python39 python=3.9 -y &amp;&amp;\\\nconda create -n python310 python=3.10 -y &amp;&amp;\\\nconda create -n python311 python=3.11 -y &amp;&amp;\\\nconda create -n python312 python=3.12 -y &amp;&amp;\\\nconda create -n python313 python=3.13 -y\n\nconda activate python38 &amp;&amp; pip install build twine pybind11 numpy setuptools wheel --no-warn-script-location &amp;&amp;\\\nconda activate python39 &amp;&amp; pip install build twine pybind11 numpy setuptools wheel --no-warn-script-location &amp;&amp;\\\nconda activate python310 &amp;&amp; pip install build twine pybind11 numpy setuptools wheel --no-warn-script-location &amp;&amp;\\\nconda activate python311 &amp;&amp; pip install build twine pybind11 numpy setuptools wheel --no-warn-script-location &amp;&amp;\\\nconda activate python312 &amp;&amp; pip install build twine pybind11 numpy setuptools wheel --no-warn-script-location &amp;&amp;\\\nconda activate python313 &amp;&amp; pip install build twine pybind11 numpy setuptools wheel --no-warn-script-location\n</code></pre>"},{"location":"BUILD_whl/#02","title":"02.","text":"<pre><code>conda activate python38 &amp;&amp; python -m build --wheel &amp;&amp; \\\nconda activate python39 &amp;&amp; python -m build --wheel &amp;&amp; \\\nconda activate python310 &amp;&amp; python -m build --wheel &amp;&amp; \\\nconda activate python311 &amp;&amp; python -m build --wheel &amp;&amp; \\\nconda activate python312 &amp;&amp; python -m build  --wheel &amp;&amp; \\\nconda activate python313 &amp;&amp; python -m build\n</code></pre>"},{"location":"SETUP/","title":"Setup","text":""},{"location":"SETUP/#this-document-is-a-summary-of-the-information-required-to-build-c-instead-of-python","title":"This document is a summary of the information required to build C++ instead of Python.","text":""},{"location":"SETUP/#01-7z","title":"01. 7z","text":""},{"location":"SETUP/#windows","title":"Windows","text":"<p>Download the <code>7-Zip installer for Windows</code> from https://www.7-zip.org/download.html and run it to copy the following files to <code>C:\\Windows\\System32\\</code>.</p> <ul> <li>Lang</li> <li>7z.dll</li> <li>7z.exe</li> <li>7-zip.dll</li> <li>7-zip32.dll</li> </ul>"},{"location":"SETUP/#ubuntu","title":"Ubuntu","text":"<p>sudo apt install p7zip-full -y</p>"},{"location":"SETUP/#centos","title":"CentOS","text":"<p>sudo yum install p7zip p7zip-plugins -y</p>"},{"location":"SETUP/#macos","title":"MacOS","text":"<p>brew install p7zip</p>"},{"location":"SETUP/#02-compiler","title":"02. Compiler","text":""},{"location":"SETUP/#macosclang","title":"MacOS(clang)","text":"<pre><code>brew install llvm libomp\n\n# Add the following to ~/.zshrc\nexport PATH=\"$(brew --prefix llvm)/bin:$PATH\"\nexport LDFLAGS=\"-L$(brew --prefix llvm)/lib\"\nexport CPPFLAGS=\"-I$(brew --prefix llvm)/include\"\nexport CC=\"$(brew --prefix llvm)/bin/clang\"\nexport CXX=\"$(brew --prefix llvm)/bin/clang++\"\n</code></pre>"},{"location":"SETUP/#windowsmsvc-2022","title":"Windows(MSVC 2022)","text":"<p>Install Visual Studio 2022 from https://visualstudio.microsoft.com/ko/vs/community/.</p>"},{"location":"SETUP/#ubuntug","title":"Ubuntu(g++)","text":"<pre><code>sudo apt install gcc g++ make cmake -y\n</code></pre>"},{"location":"SETUP/#03-ide","title":"03. IDE","text":"<p>CLion</p>"},{"location":"SETUP/#04-c","title":"04. C++","text":"<ul> <li>Compatible with C++17.</li> <li>Supports building on Linux, Windows, and macOS.</li> <li>Buildable with G++, Clang++, and MSVC compilers.</li> </ul>"},{"location":"SETUP_zh-CN/","title":"\u73af\u5883\u200b\u914d\u7f6e","text":""},{"location":"SETUP_zh-CN/#c-python","title":"\u672c\u200b\u6587\u6863\u200b\u603b\u7ed3\u200b\u4e86\u200b\u6784\u5efa\u200b C++\uff08\u200b\u800c\u200b\u975e\u200b Python\uff09\u200b\u7a0b\u5e8f\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u76f8\u5173\u200b\u4fe1\u606f\u200b\u3002","text":""},{"location":"SETUP_zh-CN/#01-7z","title":"01. 7z \u200b\u5b89\u88c5","text":""},{"location":"SETUP_zh-CN/#windows","title":"Windows","text":"<p>\u200b\u4ece\u200b7-Zip\u200b\u5b98\u7f51\u200b\u4e0b\u8f7d\u200b<code>7-Zip installer for Windows</code>\uff0c\u200b\u8fd0\u884c\u200b\u5b89\u88c5\u7a0b\u5e8f\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b\u4ee5\u4e0b\u200b\u6587\u4ef6\u200b\u590d\u5236\u5230\u200b\u76ee\u5f55\u200b <code>C:\\Windows\\System32\\</code>\uff1a</p> <ul> <li>Lang</li> <li>7z.dll</li> <li>7z.exe</li> <li>7-zip.dll</li> <li>7-zip32.dll</li> </ul>"},{"location":"SETUP_zh-CN/#ubuntu","title":"Ubuntu","text":"<pre><code>sudo apt install p7zip-full -y\n</code></pre>"},{"location":"SETUP_zh-CN/#centos","title":"CentOS","text":"<pre><code>sudo yum install p7zip p7zip-plugins -y\n</code></pre>"},{"location":"SETUP_zh-CN/#macos","title":"MacOS","text":"<pre><code>brew install p7zip\n</code></pre>"},{"location":"SETUP_zh-CN/#02","title":"02. \u200b\u7f16\u8bd1\u5668\u200b\u5b89\u88c5","text":""},{"location":"SETUP_zh-CN/#macos-clang","title":"MacOS (Clang)","text":"<pre><code>brew install llvm libomp\n\n# \u200b\u5728\u200b ~/.zshrc \u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u4ee5\u4e0b\u5185\u5bb9\u200b\uff1a\nexport PATH=\"$(brew --prefix llvm)/bin:$PATH\"\nexport LDFLAGS=\"-L$(brew --prefix llvm)/lib\"\nexport CPPFLAGS=\"-I$(brew --prefix llvm)/include\"\nexport CC=\"$(brew --prefix llvm)/bin/clang\"\nexport CXX=\"$(brew --prefix llvm)/bin/clang++\"\n</code></pre>"},{"location":"SETUP_zh-CN/#windows-msvc-2022","title":"Windows (MSVC 2022)","text":"<p>\u200b\u4ece\u200b\u4ee5\u4e0b\u200b\u94fe\u63a5\u200b\u5b89\u88c5\u200b Visual Studio 2022\uff1a https://visualstudio.microsoft.com/ko/vs/community/</p>"},{"location":"SETUP_zh-CN/#ubuntu-g","title":"Ubuntu (G++)","text":"<pre><code>sudo apt install gcc g++ make cmake -y\n</code></pre>"},{"location":"SETUP_zh-CN/#03-ide","title":"03. \u200b\u63a8\u8350\u200b IDE","text":"<p>\u200b\u63a8\u8350\u200b\u4f7f\u7528\u200b CLion\u3002</p>"},{"location":"SETUP_zh-CN/#04-c","title":"04. C++ \u200b\u652f\u6301","text":"<ul> <li>\u200b\u517c\u5bb9\u200b C++17 \u200b\u6807\u51c6\u200b\u3002</li> <li>\u200b\u652f\u6301\u200b Linux\u3001Windows \u200b\u548c\u200b macOS \u200b\u5e73\u53f0\u200b\u6784\u5efa\u200b\u3002</li> <li>\u200b\u652f\u6301\u200b\u4f7f\u7528\u200b G++\u3001Clang++ \u200b\u548c\u200b MSVC \u200b\u7f16\u8bd1\u5668\u200b\u6784\u5efa\u200b\u3002</li> </ul>"},{"location":"UPLOAD/","title":"UPLOAD","text":""},{"location":"UPLOAD/#upload","title":"Upload","text":"<pre><code>python -m twine upload --repository-url https://upload.pypi.org/legacy/ dist/*\n</code></pre>"}]}